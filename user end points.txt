@CrossOrigin(origins = "http://localhost:4200")
@RestController
@RequestMapping("/user")
@Api(value = "Swagger2DemoRestController")
@Validated
public class UserController {

	Logger logger = LoggerFactory.getLogger(UserController.class);
	@Autowired
	IUserService userService;
	@Autowired
	private CustomerService customerService;
	@Autowired
	private IBookingService bookingService;
	@Autowired
	CustomerRepository customerRepository;
	@Autowired
	private MoviesService moviesService;
	@Autowired
	private ScreenService screenService;
	@Autowired
	private ISeatService seatService;
	@Autowired
	private ShowService showService;
	
	@Autowired
	private TheatreService theatreservice;
	
	@Autowired
	private TicketService ticketService;
	@Autowired
	LoginService logServ;
	
	
	@GetMapping("/findall")
	public ResponseEntity<List<CustomerDTO>> viewCustomerList() throws AccessForbiddenException {
		
		logger.info("---------------Customer List-----------------");
		List<Customer> customer=customerService.viewCustomerList();
		List<CustomerDTO> resultDTO=EntityDtoMapper.convertToDTOList(customer, CustomerDTO.class);
		return ResponseEntity.ok(resultDTO);
	}
	
	@DeleteMapping("/delete/{customerId}")
	public ResponseEntity<CustomerDTO> removeCustomer(@PathVariable int customerId)
			throws CustomerNotFoundException, AccessForbiddenException {
		
		logger.info("----------------Customer Deleted Successfully--------------");
		Customer customer=customerService.removeCustomer(customerId);
		CustomerDTO resultDTO=EntityDtoMapper.convertToDTO(customer, CustomerDTO.class);
		return ResponseEntity.ok(resultDTO);
	}
	
	@GetMapping("/view/{customerId}")
	public ResponseEntity<CustomerDTO> viewACustomer(@PathVariable int customerId) throws CustomerNotFoundException {

		ResponseEntity<CustomerDTO> response = null;
		try {
			Customer customer = customerService.viewCustomer(customerId);
			CustomerDTO resultDTO=EntityDtoMapper.convertToDTO(customer, CustomerDTO.class);
			response = new ResponseEntity<>(resultDTO, HttpStatus.OK);
			logger.info("-------Movie With Movie id " + customerId + " Found---------");
		} catch (Exception e) {
			response = new ResponseEntity<>(HttpStatus.NOT_FOUND);
			throw new CustomerNotFoundException("Customer with " + customerId + " id dosen't exist");
		}
		return response;
	}

	
	@PostMapping(value = "/booking/add", consumes = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<BookingDTO> addTicketBooking(@Valid @RequestBody BookingDTO bookingDTO,
			@RequestParam(required = false) Integer customerId,@RequestParam(required = false) Integer showId)
			throws AccessForbiddenException, BookingNotFoundException {
		Booking booking = EntityDtoMapper.convertToEntity(bookingDTO, Booking.class);
		Booking addedBooking=bookingService.addBooking(booking, customerId,showId);
		BookingDTO addedBookingDTO = EntityDtoMapper.convertToDTO(addedBooking, BookingDTO.class);
		return ResponseEntity.ok(addedBookingDTO);
	}


	@GetMapping("/booking/findall")
	public ResponseEntity<List<BookingDTO>> viewAllBookings() throws AccessForbiddenException, BookingNotFoundException {
		
		logger.info("-------List Of Bookings Fetched Successfully---------");
		List<Booking> booking=bookingService.viewBookingList();
		List<BookingDTO> vBookingDTO=EntityDtoMapper.convertToDTOList(booking, BookingDTO.class);
		return ResponseEntity.ok(vBookingDTO);
	}
	
	@GetMapping("/booking/view/{bookingId}")
	public ResponseEntity<BookingDTO> viewBooking(@PathVariable int bookingId)
			throws BookingNotFoundException {
		ResponseEntity<BookingDTO> response = null;
		
		try {
			Booking booking = bookingService.viewBooking(bookingId);
			BookingDTO resultDTO=EntityDtoMapper.convertToDTO(booking, BookingDTO.class);
			response = new ResponseEntity<>(resultDTO, HttpStatus.OK);
			logger.info("-------Screen Found---------");
		} catch (Exception e) {
			response = new ResponseEntity<>(HttpStatus.NOT_FOUND);
			throw new BookingNotFoundException("Booking dosen't exist");
		}
		return response;
	}
	
	
	@GetMapping("/booking/view/{movieId}")
	public ResponseEntity<List<BookingDTO>> viewMovieByMovieId(@PathVariable int movieId)
			throws AccessForbiddenException, BookingNotFoundException {
		
		logger.info("-------Bookings With MovieId " + movieId + " Fetched Successfully---------");
		List<Booking> booking=bookingService.showAllBookings(movieId);
		List<BookingDTO> resultDTO=EntityDtoMapper.convertToDTOList(booking, BookingDTO.class);
		return ResponseEntity.ok(resultDTO);
	}

	
	@GetMapping("/booking/viewMovieByDate/{date}")
	public ResponseEntity<List<BookingDTO>> viewMovieByLocalDateBooking(
			@RequestParam("bookingDate") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date)
			throws AccessForbiddenException, BookingNotFoundException {
		
		logger.info("-------Bookings With Date " + date + " Fetched Successfully---------");
		List<Booking> booking=bookingService.showAllBookings(date);
		List<BookingDTO> resultDTO=EntityDtoMapper.convertToDTOList(booking, BookingDTO.class);
		return ResponseEntity.ok(resultDTO);
	}

	
	@GetMapping("/booking/cost/{bookingId}")
	public double TotalBookingCost(@PathVariable int bookingId)
			throws AccessForbiddenException, BookingNotFoundException {
		
		logger.info("-------Total Cost Of Booking displayed Successfully---------");
		return bookingService.calculateTotalCost(bookingId);
	}
	
	@GetMapping("/movies/findall")
	public ResponseEntity<List<MovieDTO>> viewMovieList() throws MovieNotFoundException {

		logger.info("-------Movie List Fetched---------");
		List<Movie> movie=moviesService.viewMovieList();
		List<MovieDTO> resultDTO=EntityDtoMapper.convertToDTOList(movie, MovieDTO.class);
		return ResponseEntity.ok(resultDTO);
	}

	@GetMapping("/movies/view/{movieId}")
	public ResponseEntity<MovieDTO> viewMovie(@PathVariable int movieId)
			throws MovieNotFoundException {

		ResponseEntity<MovieDTO> response = null;
		try {
			Movie movie = moviesService.viewMovie(movieId);
			MovieDTO resultDTO=EntityDtoMapper.convertToDTO(movie, MovieDTO.class);
			response = new ResponseEntity<>(resultDTO, HttpStatus.OK);
			logger.info("-------Movie With Movie id " + movieId + " Found---------");
		} catch (Exception e) {
			response = new ResponseEntity<>(HttpStatus.NOT_FOUND);
			throw new MovieNotFoundException("Movie with " + movieId + " id dosen't exist");
		}
		return response;
	}


	@GetMapping("/movies/view/byTheatre/{theatreId}")
	public ResponseEntity<List<MovieDTO>> viewMovieByTheatreId(@PathVariable int theatreId)  {
		logger.info("-------Movies With TheatreId " + theatreId + " Found---------");
		List<Movie> movie=moviesService.viewMovieList(theatreId);
		List<MovieDTO> resultDTO=EntityDtoMapper.convertToDTOList(movie, MovieDTO.class);
		return ResponseEntity.ok(resultDTO);
	}


	@GetMapping("/movies/view/byLocDate/{date}")
	public ResponseEntity<List<MovieDTO>> viewMovieByLocalDateMovie(
			@RequestParam("movieDate") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date) {
		logger.info("-------Movies With Date " + date + " Found---------");
		List<Movie> movie=moviesService.viewMovieList(date);
		List<MovieDTO> resultDTO=EntityDtoMapper.convertToDTOList(movie, MovieDTO.class);
		return ResponseEntity.ok(resultDTO);
	}
	
	@GetMapping("/screens/findall")
	public ResponseEntity<List<ScreenDTO>> viewScreenList() throws  ScreenNotFoundException {

		logger.info("-------List Of Screens Fetched Successfully---------");
		List<Screen> viewScreeenList=screenService.viewScreenList();
		List<ScreenDTO> viewScreeenListDTO=EntityDtoMapper.convertToDTOList(viewScreeenList, ScreenDTO.class);
		return ResponseEntity.ok(viewScreeenListDTO);
	}
	
	@GetMapping("/screens/theatre/{screenId}")
	public ResponseEntity<TheatreDTO>  getTheatreById(@PathVariable int screenId) throws ScreenNotFoundException {
		ResponseEntity<TheatreDTO> response = null;
		try {
			Theatre theatre = screenService.getTheatre(screenId);
			TheatreDTO theatreDTO=EntityDtoMapper.convertToDTO(theatre, TheatreDTO.class);
			response = new ResponseEntity<>(theatreDTO, HttpStatus.OK);
		} catch (Exception e) {
			response = new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
		return response;
	}
	
	@GetMapping("/screens/viewScreen/{screenId}")
	public ResponseEntity<ScreenDTO> viewScreen(@PathVariable int screenId)
			throws ScreenNotFoundException {
		ResponseEntity<ScreenDTO> response = null;
		try {
			Screen screen = screenService.viewScreen(screenId);
			ScreenDTO viewscreenDTO=EntityDtoMapper.convertToDTO(screen, ScreenDTO.class);
			response = new ResponseEntity<>(viewscreenDTO, HttpStatus.OK);
			logger.info("-------Screen Found---------");
		} catch (Exception e) {
			response = new ResponseEntity<>(HttpStatus.NOT_FOUND);
			throw new ScreenNotFoundException("Screen dosen't exist");
		}
		return response;
	}
	
	
	
	@GetMapping("/seats/findall")
	public ResponseEntity<List<SeatDTO>> viewSeatList() throws AccessForbiddenException, SeatNotFoundException {
		
		logger.info("-------List of Seats Fetched Successfully---------");
		List<Seat> seat=seatService.viewSeatList();
		List<SeatDTO> viewSeatDTO=EntityDtoMapper.convertToDTOList(seat, SeatDTO.class);
		return ResponseEntity.ok(viewSeatDTO);
	}

	
	
	
	@PutMapping("/seats/book")
	public ResponseEntity<SeatDTO> BookASeat(@Valid @RequestBody SeatDTO seatDTO)
			throws AccessForbiddenException, SeatNotFoundException {
		Seat seat=EntityDtoMapper.convertToEntity(seatDTO, Seat.class);
		seat = seatService.bookSeat(seat);
		logger.info("-------Seat booking Successfull---------");
		SeatDTO resultSeatDTO=EntityDtoMapper.convertToDTO(seat, SeatDTO.class);
		return new ResponseEntity<>(resultSeatDTO, HttpStatus.OK);
	}

	
	@PutMapping("/seats/cancel")
	public ResponseEntity<SeatDTO> CancelASeat(@Valid @RequestBody SeatDTO seatDTO)
			throws AccessForbiddenException, SeatNotFoundException {
		Seat seat=EntityDtoMapper.convertToEntity(seatDTO, Seat.class);
		seat = seatService.cancelSeatBooking(seat);
		SeatDTO resultSeatDTO=EntityDtoMapper.convertToDTO(seat, SeatDTO.class);
		logger.info("-------Seat Cancellation Successfull---------");
		return new ResponseEntity<>(resultSeatDTO, HttpStatus.OK);
	}

	
	@PutMapping("/seats/block")
	public ResponseEntity<SeatDTO> BloclASeat(@Valid @RequestBody SeatDTO seatDTO)
			throws AccessForbiddenException, SeatNotFoundException {
		Seat seat=EntityDtoMapper.convertToEntity(seatDTO, Seat.class);
		seat = seatService.blockSeat(seat);
		SeatDTO resultSeatDTO=EntityDtoMapper.convertToDTO(seat, SeatDTO.class);
		logger.info("-------Seat blocking Successfull---------");
		return new ResponseEntity<>(resultSeatDTO, HttpStatus.OK);
	}
	

	@GetMapping("/shows/view/{showId}")
	public ResponseEntity<ShowDTO> viewShow(@PathVariable int showId)
			throws  ShowNotFoundException {

		ResponseEntity<ShowDTO> response = null;
		try {
			Show viewShow = showService.viewShow(showId);
			ShowDTO viewShowDTO=EntityDtoMapper.convertToDTO(viewShow, ShowDTO.class);
			response = new ResponseEntity<>(viewShowDTO, HttpStatus.OK);
			logger.info("-------Show with ShowId " + showId + " Found Successfully---------");
		} catch (Exception e) {
			response = new ResponseEntity<>(HttpStatus.NOT_FOUND);
			throw new ShowNotFoundException("Show with " + showId + " id dosen't exist");
		}
		return response;
	}


	@GetMapping("/shows/findall")
	public ResponseEntity<List<ShowDTO>> viewShowList() {

		logger.info("-------List Of Shows Fetched Successfully---------");
		//Show allShows=EntityDtoMapper.convertToEntity(showDTO, Show.class);
		List<Show> allShows=showService.viewAllShows();
		List<ShowDTO> allShowsDTO=EntityDtoMapper.convertToDTOList(allShows, ShowDTO.class);
		return ResponseEntity.ok(allShowsDTO);
	}

	
	@GetMapping("/shows/show_theatre/{theatreId}")
	public ResponseEntity<List<ShowDTO>> viewShowByTheatreId(@PathVariable int theatreId) {
		List<Show> viewShowByTid = showService.viewShowList(theatreId);
		List<ShowDTO> viewShowByTidDTO=EntityDtoMapper.convertToDTOList(viewShowByTid, ShowDTO.class);
		logger.info("-------List Of Shows With TheatreId " + theatreId + " Fetched Successfully---------");
		return ResponseEntity.ok(viewShowByTidDTO);
	}


	@GetMapping("/shows/date/{date}")
	public ResponseEntity<List<ShowDTO>> viewShowByLocalDate(@PathVariable int date) {

		List<Show> viewShowByLocDate=showService.viewShowList(date);
		List<ShowDTO> viewShowByLocDateDTO=EntityDtoMapper.convertToDTOList(viewShowByLocDate, ShowDTO.class);
		logger.info("-------List Of Shows With Date " + date + " Fetched Successfully---------");
		return ResponseEntity.ok(viewShowByLocDateDTO);
	}
	
	@GetMapping("/theatre/all")
	public ResponseEntity<List<TheatreDTO>> getAlltheatres() throws  TheatreNotFoundException {

		logger.info("-------Theatre List Fetched---------");
		List<Theatre> allTheatres=theatreservice.getAllTheatres();
		List<TheatreDTO> allTheatresDTO=EntityDtoMapper.convertToDTOList(allTheatres, TheatreDTO.class);
		return ResponseEntity.ok(allTheatresDTO);
	}

	
	
	
	@GetMapping("/theatre/find/{theatreId}")
	public ResponseEntity<TheatreDTO> findTheatre(@PathVariable int theatreId)
			throws  TheatreNotFoundException {

		logger.info("-------Theatre Found with Theatre id" + theatreId + "---------");
		Theatre theatre= theatreservice.findTheatres(theatreId);
		TheatreDTO findtheatreDTO=EntityDtoMapper.convertToDTO(theatre, TheatreDTO.class);
		return ResponseEntity.ok(findtheatreDTO);
		
	}

	
	
	@GetMapping("/theatre/findbyMovie/{movieId}")
	public ResponseEntity<List<TheatreDTO>> findTheatreByMovieId(@PathVariable int movieId)
			throws  TheatreNotFoundException {
		List<Theatre> theatre=theatreservice.findTheatresByMovie(movieId);
		List<TheatreDTO> byIdtheaatreDTO=EntityDtoMapper.convertToDTOList(theatre, TheatreDTO.class);
		return ResponseEntity.ok(byIdtheaatreDTO);
	}
	
	@GetMapping("/tickets/findall")
	public ResponseEntity<List<TicketDTO>> viewTicketList() throws AccessForbiddenException, TicketNotFoundException {
		
		logger.info("-------List of Tickets Found Successfully---------");
		List<Ticket> viewTicket=ticketService.viewTicketList();
		List<TicketDTO> viewTicketDTO=EntityDtoMapper.convertToDTOList(viewTicket, TicketDTO.class);
		return ResponseEntity.ok(viewTicketDTO);
	}

	
	@GetMapping("/tickets/{ticketId}")
	public ResponseEntity<TicketDTO> findATicket(@PathVariable int ticketId) throws TicketNotFoundException, AccessForbiddenException {	
		Ticket t = null;
		TicketDTO tDTO=null;
		try {
			t = ticketService.findTicket(ticketId);
			tDTO=EntityDtoMapper.convertToDTO(t, TicketDTO.class);
			logger.info("-------Ticket with ticketId " + ticketId + " Foound Successfully---------");
		} catch (Exception e) {
			throw new TicketNotFoundException("Invalid Ticket ID");
		}
		return ResponseEntity.ok(tDTO);

	}